type Account @entity(immutable: true) {
  id: Bytes!
  subAccount: Bytes!
  owner: Bytes!
}

type ProxyCreated @entity(immutable: true) {
  id: Bytes!
  proxy: Bytes! # address
  upgradeable: Boolean! # bool
  implementation: Bytes! # address
  trailingData: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerVault @entity(immutable: false) {
  id: Bytes!
  evc: Bytes!
  name: String!
  decimals: BigInt!
  borrowCap: BigInt!
  supplyCap: BigInt!
  dToken: Bytes!
  evault: Bytes!
  permit2Address: Bytes!
  interestRateModel: Bytes!
  governonAdmin: Bytes!
  feeReceiver: Bytes!
  asset: Bytes
  oracle: Bytes!
  creator: Bytes!
  symbol: String!
  unitOfAccount: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BalanceForwarderStatus @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  status: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Borrow @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  assets: BigInt! # uint256
  vault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConvertFee @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  protocolReceiver: Bytes! # address
  governorReceiver: Bytes! # address
  protocolShares: BigInt! # uint256
  governorShares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DebtSocialized @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  assets: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  vault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EVaultCreated @entity(immutable: true) {
  id: Bytes!
  evault: Bytes! # address
  creator: Bytes! # address
  asset: Bytes! # address
  dToken: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type InterestAccrued @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  assets: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Liquidate @entity(immutable: true) {
  id: Bytes!
  liquidator: Bytes! # address
  violator: Bytes! # address
  collateral: Bytes! # address
  repayAssets: BigInt! # uint256
  yieldBalance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PullDebt @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  assets: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Repay @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  assets: BigInt! # uint256
  vault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  vault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VaultStatus @entity(immutable: true) {
  id: Bytes!
  totalShares: BigInt! # uint256
  totalBorrows: BigInt! # uint256
  accumulatedFees: BigInt! # uint256
  cash: BigInt! # uint256
  interestAccumulator: BigInt! # uint256
  interestRate: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiver: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  vault: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type Counter @entity(immutable: false) {
  id: Bytes! # bytes32
  type: String! # string
  value: BigInt! # uint256
  blockNumber: BigInt
  blockTimestamp: BigInt
  transactionHash: Bytes
  isGlobal: Boolean!
}

type AccountAggrVault @entity(immutable: true) {
  id: Bytes!
  accountPrefix: Bytes!
  vaults: [VaultByAccount!]! @derivedFrom(field: "account")
}

type VaultByAccount @entity(immutable: true) {
  id: Bytes!
  account: AccountAggrVault!
  vault: Bytes!
}

########################################################
# Tracking
########################################################

type CallWithContext @entity(immutable: true) {
  id: Bytes! # txHash + vaultAddress
  selector: String!
  vault: Bytes!
  mainAddress: Bytes!
  accounts: [Bytes!]!
  type: String!
  evc: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type TrackingActiveAccount @entity(immutable: false) {
  id: Bytes! # mainAddress 
  mainAddress: Bytes!
  deposits: [Bytes!]!  # account + vault
  borrows: [Bytes!]!  # account + vault
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TrackingVaultBalance @entity(immutable: false) {
  id: Bytes!  # account + vault
  isControllerEnabled: Boolean!
  vault: Bytes!
  mainAddress: Bytes!
  account: Bytes!
  balance: BigInt!
  debt: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


########################################################
# Earn
########################################################

type DeployEulerEarn @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  eulerEarnVault: Bytes! # address
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerEarnApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type EulerEarnDeposit @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerEarnTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerEarnWithdraw @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  receiver: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerEarnVault @entity(immutable: false) {
    id: Bytes!
    evc: Bytes!
    name: String!
    symbol: String!
    owner: Bytes!
    asset: Bytes!
    hooks: Bytes!
    permit2Address: Bytes!
    strategyModule: Bytes!
    totalAssets: BigInt!
    totalAllocated: BigInt!
    totalSupply: BigInt!
    harvests: [EulerEarnExecuteHarvest!]! @derivedFrom(field: "eulerEarnVault")
    rebalances: [EulerEarnRebalance!]! @derivedFrom(field: "eulerEarnVault")
    interestUpdated: [EulerEarnInterestUpdated!]! @derivedFrom(field: "eulerEarnVault")
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type EulerEarnExecuteHarvest @entity(immutable: true) {
    id: Bytes!
    timestamp: BigInt!
    eulerEarnVault: EulerEarnVault!
    harvester: Bytes!
    strategy: Bytes!
    eulerEarnAssetsAmount: BigInt!
    strategyAllocatedAmount: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type EulerEarnHarvest @entity(immutable: true) {
    id: Bytes!
    timestamp: BigInt!
    harvester: Bytes!
    eulerEarnVault: EulerEarnVault!
    totalAllocated: BigInt!
    totalYield: BigInt!
    totalLoss: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type EulerEarnRebalance @entity(immutable: true) {
    id: Bytes!
    timestamp: BigInt!
    rebalancer: Bytes!
    txHash: Bytes!
    eulerEarnVault: EulerEarnVault!
    strategy: Bytes!
    amountToRebalance: BigInt!
    isDeposit: Boolean!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

type EulerEarnInterestUpdated @entity(immutable: true) {
    id: Bytes!
    timestamp: BigInt!
    eulerEarnVault: EulerEarnVault!
    interestAccrued: BigInt!
    interestLeft: BigInt!
    blockNumber: BigInt!
    blockTimestamp: BigInt!
    transactionHash: Bytes!
}

########################################################
# Euler Swap
########################################################

## FACTORY 

type EulerSwapPool @entity(immutable: false) {
  id: Bytes!
  asset0: Bytes! 
  asset1: Bytes!
  vault0: Bytes
  vault1: Bytes
  fee: BigInt
  protocolFee: BigInt
  protocolFeeRecipient: Bytes
  eulerAccount: Bytes!
  equilibriumReserve0: BigInt
  equilibriumReserve1: BigInt
  currReserve0: BigInt
  currReserve1: BigInt
  priceY: BigInt
  priceX: BigInt
  concentrationX: BigInt
  concentrationY: BigInt
  pool: Bytes!
  active: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerSwapPoolUninstalled @entity(immutable: true) {
  id: Bytes!
  asset0: Bytes! 
  asset1: Bytes!
  eulerAccount: Bytes!
  pool: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

## PoolUninstalled

type EulerSwapActivated  @entity(immutable: true) {
  id: Bytes!
  asset0: Bytes! 
  asset1: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EulerSwap  @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! 
  amount0In: BigInt!
  amount1In: BigInt!
  amount0Out: BigInt!
  amount1Out: BigInt!
  reserve0: BigInt!
  reserve1: BigInt!
  from: Bytes!
  to: Bytes!
  pool: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
